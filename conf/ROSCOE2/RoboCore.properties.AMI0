# If 'Controller' is MarlinspikeDataPort instead of physical port like /dev/ttyACM0, then pins refer to GPIO pins, otherwise they are
# the physical pins on the Mega2560 or other microcontroller attached to the port, 
# EXCEPT for the PWM0, PWM1, AIN0 and AIN1 which use
# physical pins numbering as they are handled in special case outside libgpio.
# physical pins numbering as they are handled in special case outside libgpio.
# The libgpio GPIO pin designations which map to the physical 40 pin header can be found with gpioinfo command
# We use the PIN_ descriptor as our code does a find_by_name
# line  64:     "PIN_27"       unused   input  active-high
# line  65:     "PIN_28"       unused   input  active-high
# line  66:     "PIN_16"       unused   input  active-high
# line  67:     "PIN_18"       unused   input  active-high
# line  68:     "PIN_22"       unused   input  active-high
# line  69:     "PIN_11"       unused   input  active-high
# line  70:     "PIN_13"       unused   input  active-high
# line  71:      "PIN_7"       unused   input  active-high
# line  72:     "PIN_33"       unused   input  active-high
# line  73:     "PIN_15"       unused   input  active-high
# line  74:     "PIN_19"       unused   input  active-high
# line  75:     "PIN_21"       unused   input  active-high
# line  76:     "PIN_24"     "spi0.0"  output  active-high [used]
# line  77:     "PIN_23"       unused   input  active-high
# line  78:      "PIN_8"       unused   input  active-high
# line  79:     "PIN_10"       unused   input  active-high
# line  80:     "PIN_29"       unused   input  active-high
# line  81:     "PIN_31"       unused   input  active-high
# line  82:     "PIN_12"       unused   input  active-high
# line  83:      "PIN_3"       unused   input  active-high
# line  84:      "PIN_5"       unused   input  active-high
# line  85:     "PIN_35"       unused   input  active-high
#
# Assume 3 controllers, so con-one gets slot 0 tty0 for left wheel , con-two gets slot 0 tty1 for right wheel
# con-three gets slot 0 tty0 for boom, con-three gets PWM slot 0 tty0 for LED since PWM uses different slots, and
# con-three gets slot 1 tty0 for lift.
Name:ROSCOE2
IsIndoor:false
LUN[0].Name:BoomActuator
LUN[0].NodeName:AMI0
LUN[0].Controller:MarlinspikeDataPort
LUN[0].Type:H-Bridge
LUN[0].Slot:0
LUN[0].SignalPin0:33
LUN[0].Channel:1
LUN[0].EnablePin:2
LUN[0].Direction:0
LUN[0].MinValue:-1000
LUN[0].MaxValue:1000
AXIS[0].AxisType:Stick
AXIS[0].AxisX:1
AXIS[0].AxisY:3
# Define PWM LED driver simple Output pin linked to trigger, axis 4.
# optionally a Type 4 PWM driver in separate slot from motor drivers
# M10 Z0 T4
# then config slot 0 to PWM pin 33 on channel 1 enable pin 3
# M9 Z0 P33 C1 D3
LUN[1].Name:LEDDriver
LUN[1].NodeName:AMI0
LUN[1].Controller:MarlinspikeDataPort
LUN[1].Type:OutputPin
LUN[1].Pin:0
LUN[1].Toggle:true
AXIS[1].AxisType:Trigger
AXIS[1].Axis:4
# If we wanted to use PWN, Define SplitBridge lift actuator slot 1 to Type 2 split bridge driver in motor driver slot
# M10 Z1 T2
# For PWM, Config SplitBridge lift actuator slot 1, pwm pins 6 and 7 for forward/reverse channel 1, enable pin 32, default dir 0
# M4 Z1 P6 Q7 C1 D32 E0
# But if we dont need PWM, we can config a SwitchBridge, which uses output pins at full DC drive level when no PWM and no speed
# control is necessary:
# M10 Z1 T3
# M5 Z<slot> P<pin> Q<pin> C<channel> D<enable pin> E<default dir> [W<encoder>]
# In this config, enable allows either forward or reverse pin to use applied pin output.
# Create switch bridge Z slot, P forward pin, Q reverse pin, D enable, E default state of enable for dir
# Switch bridge or 2 digital motor controller. Takes 2 inputs: one digital pin for forward,called P, 
# one for backward,called Q, then motor channel,
# and then D, an enable pin, and E default dir, with optional encoder.
# A SwitchHBridge is derived from a SwitchBridge. It uses one signal pin and
# one pin for direction.
# M10 Z1 T4
# M5 Z<slot> P<pin> C<channel> D<direction pin> E<default dir> [W<encoder>]
# Notice the M5 directive is the same, but excludes the second pin, thus
# Designating the SwitchHBridge.
LUN[2].Name:LiftActuator
LUN[2].NodeName:AMI0
LUN[2].Controller:MarlinspikeDataPort
LUN[2].Type:SwitchHBridge
LUN[2].Slot:1
LUN[2].SignalPin0:4
LUN[2].Channel:1
LUN[2].EnablePin:3
LUN[2].MinValue:-1000
LUN[2].MaxValue:1000
AXIS[2].AxisType:POV
AXIS[2].Axis:6
AXIS[2].AxisUp:0.25
AXIS[2].AxisDown:0.75
CrosstrackKp:1.5
CrosstrackKd:0.9
CrosstrackKi:3.0
CrosstrackKo:1.0
CrosstrackPIDRate:30
MaxIMUDeviationDegrees:180
MinIMUDeviationDegrees:-180
TemperatureThreshold:40
